// Code generated by protoc-gen-go. DO NOT EDIT.
// source: worker.proto

package frankffenn

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SealCommitRequest struct {
	Sector               *SectorID `protobuf:"bytes,1,opt,name=Sector,proto3" json:"Sector,omitempty"`
	Commit1Out           []byte    `protobuf:"bytes,2,opt,name=Commit1Out,proto3" json:"Commit1Out,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *SealCommitRequest) Reset()         { *m = SealCommitRequest{} }
func (m *SealCommitRequest) String() string { return proto.CompactTextString(m) }
func (*SealCommitRequest) ProtoMessage()    {}
func (*SealCommitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ff6184b07e587a, []int{0}
}

func (m *SealCommitRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SealCommitRequest.Unmarshal(m, b)
}
func (m *SealCommitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SealCommitRequest.Marshal(b, m, deterministic)
}
func (m *SealCommitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SealCommitRequest.Merge(m, src)
}
func (m *SealCommitRequest) XXX_Size() int {
	return xxx_messageInfo_SealCommitRequest.Size(m)
}
func (m *SealCommitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SealCommitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SealCommitRequest proto.InternalMessageInfo

func (m *SealCommitRequest) GetSector() *SectorID {
	if m != nil {
		return m.Sector
	}
	return nil
}

func (m *SealCommitRequest) GetCommit1Out() []byte {
	if m != nil {
		return m.Commit1Out
	}
	return nil
}

type SealCommitResponse struct {
	Proof                []byte   `protobuf:"bytes,1,opt,name=Proof,proto3" json:"Proof,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SealCommitResponse) Reset()         { *m = SealCommitResponse{} }
func (m *SealCommitResponse) String() string { return proto.CompactTextString(m) }
func (*SealCommitResponse) ProtoMessage()    {}
func (*SealCommitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ff6184b07e587a, []int{1}
}

func (m *SealCommitResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SealCommitResponse.Unmarshal(m, b)
}
func (m *SealCommitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SealCommitResponse.Marshal(b, m, deterministic)
}
func (m *SealCommitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SealCommitResponse.Merge(m, src)
}
func (m *SealCommitResponse) XXX_Size() int {
	return xxx_messageInfo_SealCommitResponse.Size(m)
}
func (m *SealCommitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SealCommitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SealCommitResponse proto.InternalMessageInfo

func (m *SealCommitResponse) GetProof() []byte {
	if m != nil {
		return m.Proof
	}
	return nil
}

type SectorID struct {
	Miner                uint64   `protobuf:"varint,1,opt,name=Miner,proto3" json:"Miner,omitempty"`
	Number               uint64   `protobuf:"varint,2,opt,name=Number,proto3" json:"Number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SectorID) Reset()         { *m = SectorID{} }
func (m *SectorID) String() string { return proto.CompactTextString(m) }
func (*SectorID) ProtoMessage()    {}
func (*SectorID) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ff6184b07e587a, []int{2}
}

func (m *SectorID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SectorID.Unmarshal(m, b)
}
func (m *SectorID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SectorID.Marshal(b, m, deterministic)
}
func (m *SectorID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SectorID.Merge(m, src)
}
func (m *SectorID) XXX_Size() int {
	return xxx_messageInfo_SectorID.Size(m)
}
func (m *SectorID) XXX_DiscardUnknown() {
	xxx_messageInfo_SectorID.DiscardUnknown(m)
}

var xxx_messageInfo_SectorID proto.InternalMessageInfo

func (m *SectorID) GetMiner() uint64 {
	if m != nil {
		return m.Miner
	}
	return 0
}

func (m *SectorID) GetNumber() uint64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func init() {
	proto.RegisterType((*SealCommitRequest)(nil), "pb.SealCommitRequest")
	proto.RegisterType((*SealCommitResponse)(nil), "pb.SealCommitResponse")
	proto.RegisterType((*SectorID)(nil), "pb.SectorID")
}

func init() { proto.RegisterFile("worker.proto", fileDescriptor_e4ff6184b07e587a) }

var fileDescriptor_e4ff6184b07e587a = []byte{
	// 235 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x50, 0x3d, 0x4f, 0xc3, 0x40,
	0x0c, 0x55, 0xaa, 0x12, 0x21, 0x37, 0x0c, 0x58, 0xb4, 0x54, 0x0c, 0xa8, 0x8a, 0x18, 0x2a, 0x86,
	0x20, 0xc2, 0xc2, 0xc0, 0x04, 0x2c, 0x0c, 0x05, 0x74, 0x19, 0x10, 0x6c, 0xbd, 0xc8, 0x81, 0xa8,
	0xe4, 0x7c, 0x38, 0x77, 0xf0, 0xf7, 0x11, 0x77, 0x45, 0xad, 0x3a, 0xbe, 0x67, 0xfb, 0x7d, 0x18,
	0xb2, 0x1f, 0x96, 0x15, 0x49, 0x61, 0x85, 0x1d, 0xe3, 0xc0, 0xea, 0xfc, 0x15, 0x0e, 0x2b, 0x5a,
	0x7e, 0xde, 0x71, 0xd7, 0xb5, 0x4e, 0xd1, 0x97, 0xa7, 0xde, 0xe1, 0x19, 0xa4, 0x15, 0xd5, 0x8e,
	0x65, 0x9a, 0xcc, 0x92, 0xf9, 0xa8, 0xcc, 0x0a, 0xab, 0x8b, 0xc8, 0x3c, 0xdc, 0xab, 0xf5, 0x0c,
	0x4f, 0x01, 0xe2, 0xd9, 0xe5, 0x93, 0x77, 0xd3, 0xc1, 0x2c, 0x99, 0x67, 0x6a, 0x8b, 0xc9, 0xcf,
	0x01, 0xb7, 0xa5, 0x7b, 0xcb, 0xa6, 0x27, 0x3c, 0x82, 0xbd, 0x67, 0x61, 0x6e, 0x82, 0x74, 0xa6,
	0x22, 0xc8, 0xaf, 0x61, 0xff, 0x5f, 0xff, 0x6f, 0x63, 0xd1, 0x1a, 0x8a, 0xe6, 0x43, 0x15, 0x01,
	0x4e, 0x20, 0x7d, 0xf4, 0x9d, 0x26, 0x09, 0x4e, 0x43, 0xb5, 0x46, 0xe5, 0x02, 0x0e, 0x5e, 0x42,
	0xa9, 0x8a, 0xe4, 0xbb, 0xad, 0x09, 0x6f, 0x60, 0xb4, 0xb1, 0x2d, 0x71, 0x1c, 0xb3, 0xef, 0x54,
	0x3c, 0x99, 0xec, 0xd2, 0x31, 0xde, 0xed, 0xf1, 0xdb, 0xf8, 0xbd, 0x75, 0x1f, 0x5e, 0x17, 0x35,
	0x77, 0x17, 0x8d, 0x2c, 0xcd, 0xaa, 0x69, 0xc8, 0x18, 0x9d, 0x86, 0x9f, 0x5d, 0xfd, 0x06, 0x00,
	0x00, 0xff, 0xff, 0xaa, 0xa6, 0xa1, 0x27, 0x43, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for WorkerService service

type WorkerServiceClient interface {
	SealCommit2(ctx context.Context, in *SealCommitRequest, opts ...client.CallOption) (*SealCommitResponse, error)
}

type workerServiceClient struct {
	c           client.Client
	serviceName string
}

func NewWorkerServiceClient(serviceName string, c client.Client) WorkerServiceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "pb"
	}
	return &workerServiceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *workerServiceClient) SealCommit2(ctx context.Context, in *SealCommitRequest, opts ...client.CallOption) (*SealCommitResponse, error) {
	req := c.c.NewRequest(c.serviceName, "WorkerService.SealCommit2", in)
	out := new(SealCommitResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for WorkerService service

type WorkerServiceHandler interface {
	SealCommit2(context.Context, *SealCommitRequest, *SealCommitResponse) error
}

func RegisterWorkerServiceHandler(s server.Server, hdlr WorkerServiceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&WorkerService{hdlr}, opts...))
}

type WorkerService struct {
	WorkerServiceHandler
}

func (h *WorkerService) SealCommit2(ctx context.Context, in *SealCommitRequest, out *SealCommitResponse) error {
	return h.WorkerServiceHandler.SealCommit2(ctx, in, out)
}
