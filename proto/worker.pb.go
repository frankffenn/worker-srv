// Code generated by protoc-gen-go. DO NOT EDIT.
// source: worker.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type StatusCode int32

const (
	StatusCode_SUCCESS     StatusCode = 0
	StatusCode_SERVER_BUSY StatusCode = 1
)

var StatusCode_name = map[int32]string{
	0: "SUCCESS",
	1: "SERVER_BUSY",
}

var StatusCode_value = map[string]int32{
	"SUCCESS":     0,
	"SERVER_BUSY": 1,
}

func (x StatusCode) String() string {
	return proto.EnumName(StatusCode_name, int32(x))
}

func (StatusCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e4ff6184b07e587a, []int{0}
}

type SealCommit2Request struct {
	Sector               *SectorID `protobuf:"bytes,1,opt,name=Sector,proto3" json:"Sector,omitempty"`
	Commit1Out           []byte    `protobuf:"bytes,2,opt,name=Commit1Out,proto3" json:"Commit1Out,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *SealCommit2Request) Reset()         { *m = SealCommit2Request{} }
func (m *SealCommit2Request) String() string { return proto.CompactTextString(m) }
func (*SealCommit2Request) ProtoMessage()    {}
func (*SealCommit2Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ff6184b07e587a, []int{0}
}

func (m *SealCommit2Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SealCommit2Request.Unmarshal(m, b)
}
func (m *SealCommit2Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SealCommit2Request.Marshal(b, m, deterministic)
}
func (m *SealCommit2Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SealCommit2Request.Merge(m, src)
}
func (m *SealCommit2Request) XXX_Size() int {
	return xxx_messageInfo_SealCommit2Request.Size(m)
}
func (m *SealCommit2Request) XXX_DiscardUnknown() {
	xxx_messageInfo_SealCommit2Request.DiscardUnknown(m)
}

var xxx_messageInfo_SealCommit2Request proto.InternalMessageInfo

func (m *SealCommit2Request) GetSector() *SectorID {
	if m != nil {
		return m.Sector
	}
	return nil
}

func (m *SealCommit2Request) GetCommit1Out() []byte {
	if m != nil {
		return m.Commit1Out
	}
	return nil
}

type SealCommit2Response struct {
	Code                 StatusCode `protobuf:"varint,1,opt,name=code,proto3,enum=proto.StatusCode" json:"code,omitempty"`
	Proof                []byte     `protobuf:"bytes,2,opt,name=Proof,proto3" json:"Proof,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *SealCommit2Response) Reset()         { *m = SealCommit2Response{} }
func (m *SealCommit2Response) String() string { return proto.CompactTextString(m) }
func (*SealCommit2Response) ProtoMessage()    {}
func (*SealCommit2Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ff6184b07e587a, []int{1}
}

func (m *SealCommit2Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SealCommit2Response.Unmarshal(m, b)
}
func (m *SealCommit2Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SealCommit2Response.Marshal(b, m, deterministic)
}
func (m *SealCommit2Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SealCommit2Response.Merge(m, src)
}
func (m *SealCommit2Response) XXX_Size() int {
	return xxx_messageInfo_SealCommit2Response.Size(m)
}
func (m *SealCommit2Response) XXX_DiscardUnknown() {
	xxx_messageInfo_SealCommit2Response.DiscardUnknown(m)
}

var xxx_messageInfo_SealCommit2Response proto.InternalMessageInfo

func (m *SealCommit2Response) GetCode() StatusCode {
	if m != nil {
		return m.Code
	}
	return StatusCode_SUCCESS
}

func (m *SealCommit2Response) GetProof() []byte {
	if m != nil {
		return m.Proof
	}
	return nil
}

type SectorID struct {
	Miner                uint64   `protobuf:"varint,1,opt,name=Miner,proto3" json:"Miner,omitempty"`
	Number               uint64   `protobuf:"varint,2,opt,name=Number,proto3" json:"Number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SectorID) Reset()         { *m = SectorID{} }
func (m *SectorID) String() string { return proto.CompactTextString(m) }
func (*SectorID) ProtoMessage()    {}
func (*SectorID) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ff6184b07e587a, []int{2}
}

func (m *SectorID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SectorID.Unmarshal(m, b)
}
func (m *SectorID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SectorID.Marshal(b, m, deterministic)
}
func (m *SectorID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SectorID.Merge(m, src)
}
func (m *SectorID) XXX_Size() int {
	return xxx_messageInfo_SectorID.Size(m)
}
func (m *SectorID) XXX_DiscardUnknown() {
	xxx_messageInfo_SectorID.DiscardUnknown(m)
}

var xxx_messageInfo_SectorID proto.InternalMessageInfo

func (m *SectorID) GetMiner() uint64 {
	if m != nil {
		return m.Miner
	}
	return 0
}

func (m *SectorID) GetNumber() uint64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func init() {
	proto.RegisterEnum("proto.StatusCode", StatusCode_name, StatusCode_value)
	proto.RegisterType((*SealCommit2Request)(nil), "proto.SealCommit2Request")
	proto.RegisterType((*SealCommit2Response)(nil), "proto.SealCommit2Response")
	proto.RegisterType((*SectorID)(nil), "proto.SectorID")
}

func init() { proto.RegisterFile("worker.proto", fileDescriptor_e4ff6184b07e587a) }

var fileDescriptor_e4ff6184b07e587a = []byte{
	// 297 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x51, 0x4d, 0x4b, 0xc3, 0x40,
	0x10, 0x35, 0xd2, 0x46, 0x99, 0x54, 0x5b, 0x57, 0x91, 0xda, 0x83, 0x94, 0x80, 0x1a, 0x0a, 0x26,
	0x18, 0x2f, 0x9e, 0x9b, 0xe6, 0xe0, 0xc1, 0x0f, 0x76, 0x89, 0xa2, 0x20, 0x92, 0xa4, 0x13, 0x0d,
	0x35, 0xd9, 0xba, 0xd9, 0xd4, 0xbf, 0x2f, 0xee, 0xa6, 0x5a, 0xc5, 0xd3, 0xf0, 0xe6, 0xed, 0x7b,
	0x3b, 0xf3, 0x06, 0x3a, 0x1f, 0x5c, 0xcc, 0x50, 0xb8, 0x73, 0xc1, 0x25, 0x27, 0x6d, 0x55, 0xec,
	0x27, 0x20, 0x0c, 0xe3, 0xb7, 0x80, 0x17, 0x45, 0x2e, 0x7d, 0x8a, 0xef, 0x35, 0x56, 0x92, 0x9c,
	0x80, 0xc9, 0x30, 0x95, 0x5c, 0xf4, 0x8d, 0xa1, 0xe1, 0x58, 0x7e, 0x57, 0x8b, 0x5c, 0xdd, 0xbc,
	0x9c, 0xd0, 0x86, 0x26, 0x87, 0x00, 0x5a, 0x7a, 0x76, 0x53, 0xcb, 0xfe, 0xfa, 0xd0, 0x70, 0x3a,
	0x74, 0xa5, 0x63, 0x53, 0xd8, 0xfd, 0x65, 0x5f, 0xcd, 0x79, 0x59, 0x21, 0x39, 0x82, 0x56, 0xca,
	0xa7, 0xa8, 0xdc, 0xb7, 0xfd, 0x9d, 0xa5, 0xbb, 0x8c, 0x65, 0x5d, 0x05, 0x7c, 0x8a, 0x54, 0xd1,
	0x64, 0x0f, 0xda, 0xb7, 0x82, 0xf3, 0xac, 0x31, 0xd6, 0xc0, 0xbe, 0x80, 0xcd, 0xe5, 0x1c, 0x5f,
	0x2f, 0xae, 0xf2, 0x12, 0xf5, 0x9c, 0x2d, 0xaa, 0x01, 0xd9, 0x07, 0xf3, 0xba, 0x2e, 0x12, 0x14,
	0x4a, 0xd8, 0xa2, 0x0d, 0x1a, 0x8d, 0x00, 0x7e, 0xfe, 0x20, 0x16, 0x6c, 0xb0, 0x28, 0x08, 0x42,
	0xc6, 0x7a, 0x6b, 0xa4, 0x0b, 0x16, 0x0b, 0xe9, 0x5d, 0x48, 0x9f, 0xc7, 0x11, 0x7b, 0xe8, 0x19,
	0x7e, 0x04, 0x5b, 0xf7, 0x2a, 0x2f, 0x86, 0x62, 0x91, 0xa7, 0x48, 0x26, 0x60, 0xad, 0xac, 0x42,
	0x0e, 0xbe, 0x23, 0xf9, 0x9b, 0xde, 0x60, 0xf0, 0x1f, 0xa5, 0x37, 0x1f, 0x3b, 0x8f, 0xc7, 0x2f,
	0xb9, 0x7c, 0xad, 0x13, 0x37, 0xe5, 0x85, 0x97, 0x89, 0xb8, 0x9c, 0x65, 0x19, 0x96, 0xa5, 0xa7,
	0x8f, 0x73, 0x5a, 0x89, 0x85, 0xa7, 0xd4, 0x89, 0xa9, 0xca, 0xf9, 0x67, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x0d, 0x48, 0xf6, 0x42, 0xb7, 0x01, 0x00, 0x00,
}
